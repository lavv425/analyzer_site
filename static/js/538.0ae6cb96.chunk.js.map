{"version":3,"file":"static/js/538.0ae6cb96.chunk.js","mappings":"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","sources":["Components/Contacter/Contacter.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Button, TextField } from \"@mui/material\";\nimport styled from \"styled-components\";\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport dayjs from 'dayjs';\nimport Alert from '@mui/material/Alert';\nimport AlertTitle from '@mui/material/AlertTitle';\nimport IAmLoading from \"../IAmLoading/IAmLoading\";\nconst StyledContacterContainer = styled.div`\nmargin: 7%;\ndisplay: grid;\ngrid-template-columns: repeat(2, 1fr);\ngrid-template-rows: repeat(3, 1fr);\ngrid-column-gap: 0px;\ngrid-row-gap: 0px;\ngap: 20px;\n`;\n\nconst StyledButtonContainer = styled.div`\ndisplay: flex;\njustify-content: center;`;\nconst StyledButtonSend = styled(Button)`\nwidth:80% !important;\nborder:1px solid black !important;\nbackground:gainsboro !important;\n`;\n\nconst StyledMuiAlert = styled(Alert)`\nz-index: 9999999 !important;\nposition: absolute;\nwidth: 100vw;\ntop:0;`;\n\nconst generateAlphaNumericId = async () => {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let alphanumericId = '';\n\n    for (let i = 0; i < 5; i++) {\n        const randomIndex = Math.floor(Math.random() * characters.length);\n        alphanumericId += characters.charAt(randomIndex);\n    }\n\n    return alphanumericId;\n}\n\n\nconst Contacter = ({ type }) => {\n    const [isUploading, setIsUploading] = useState(false);\n    const [showAlert, setShowAlert] = useState(false)\n    const [severityCap, setSeverityCap] = useState()\n    const [alertTitleText, setAlertTitleText] = useState()\n    const [alertBodyText, setAlertBodyText] = useState()\n    const [formValues, setFormValues] = useState({\n        whoIsHe: '',\n        email: '',\n        subject: '',\n        description: '',\n        date: null,\n        dateToSave: null,\n    });\n\n    const [fieldErrors, setFieldErrors] = useState({\n        whoIsHe: false,\n        email: false,\n        subject: false,\n        description: false,\n        date: false\n    });\n\n    useEffect(() => {\n        if (showAlert) {\n            setTimeout(() => {\n                setShowAlert(false);\n            }, 3500);\n        }\n    }, [showAlert])\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        const isValid = value.trim() !== ''; // Verifica se il campo non è vuoto\n        setFormValues({ ...formValues, [name]: value });\n        setFieldErrors({ ...fieldErrors, [name]: !isValid });\n    };\n\n    const handleDateChange = (date) => {\n        const mydate = dayjs(date).format('DD/MM/YYYY HH:mm')\n        setFormValues({ ...formValues, date: date, dateToSave: mydate });\n        const isValid = date !== null;\n        setFieldErrors({ ...fieldErrors, date: !isValid });\n    };\n\n    const handleFormSubmit = () => {\n        setIsUploading(true);\n        let countErrors = 0;\n        Object.keys(fieldErrors).forEach(key => {\n            if (fieldErrors[key] === true) {\n                countErrors++;\n            }\n        });\n\n        Object.keys(formValues).forEach(key => {\n            if (formValues[key] === '' || formValues[key] === null) {\n                countErrors++;\n            }\n        });\n\n        if (countErrors) {\n            setIsUploading(false);\n            setSeverityCap('error');\n            setAlertTitleText('Attenzione!');\n            setAlertBodyText('Tutti i campi sono obbligatori!');\n            setShowAlert(true);\n            return false;\n        }\n        saveOnDB(formValues, type);\n    };\n\n    const saveOnDB = async (v, type) => {\n        const nv = { ...v };\n        delete nv.date;\n        const uniqueId = await generateAlphaNumericId();\n\n        const endpoint = \"http://localhost:3001/api/saveContactForm\";\n        const options = {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            accept: \"application/json\",\n            body: JSON.stringify({ uniqueId: uniqueId, type: type, nv: nv }),\n        };\n        fetch(endpoint, options)\n            .then(r => r.json())\n            .then(({ status: s, message: m }) => {\n                if (!s) {\n                    setIsUploading(false);\n                    setSeverityCap('error');\n                    setAlertTitleText('Errore');\n                    setAlertBodyText(`Non siamo riusciti a inserire la richiesta, ecco un messaggio di errore dettagliato:\\n ${m}`);\n                    setShowAlert(true);\n                } else {\n                    setFormValues({\n                        whoIsHe: '',\n                        email: '',\n                        subject: '',\n                        description: '',\n                        date: null,\n                        dateToSave: null,\n                    });\n                    setFieldErrors({\n                        whoIsHe: false,\n                        email: false,\n                        subject: false,\n                        description: false,\n                        date: false\n                    });\n                    setSeverityCap('success');\n                    setAlertTitleText('Perfetto');\n                    setAlertBodyText(m);\n                    setIsUploading(false);\n                    setShowAlert(true);\n                }\n            })\n            .catch(err => {\n                setSeverityCap('error');\n                setAlertTitleText('Errore');\n                setAlertBodyText(`Si è verificato un errore nella richiesta:\\n ${err}`);\n                setIsUploading(false);\n                setShowAlert(true);\n                console.error('Error:', err);\n            });\n    };\n\n    return (\n        <>\n            {isUploading && <IAmLoading />}\n            <h3 style={{ textAlign: 'center' }}>Form {type ? 'per effettuare la segnalazione' : 'per eventuali richieste di aggiunte'}</h3>\n            <StyledContacterContainer>\n                <TextField fullWidth label=\"Nome e cognome\" variant=\"outlined\" error={fieldErrors.whoIsHe} helperText={fieldErrors.whoIsHe ? \"Questo campo è obbligatorio\" : \"\"} className=\"form-field\" name=\"whoIsHe\" value={formValues.whoIsHe} onChange={handleInputChange} />\n                <TextField fullWidth label=\"Mail\" variant=\"outlined\" error={fieldErrors.email} helperText={fieldErrors.email ? \"Questo campo è obbligatorio\" : \"\"} className=\"form-field\" name=\"email\" value={formValues.email} onChange={handleInputChange} />\n                <TextField fullWidth label=\"Oggetto\" variant=\"outlined\" error={fieldErrors.subject} helperText={fieldErrors.subject ? \"Questo campo è obbligatorio\" : \"\"} className=\"form-field\" name=\"subject\" value={formValues.subject} onChange={handleInputChange} />\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\n                    <DateTimePicker label=\"Data necessità (se entro una scadenza)\" variant=\"outlined\" error={fieldErrors.date} helperText={fieldErrors.date ? \"Questo campo è obbligatorio\" : \"\"} className=\"form-field\" ampm={false} value={formValues.date} onChange={handleDateChange} />\n                </LocalizationProvider>\n                <TextField multiline fullWidth rows={4} style={{ gridArea: \"3 / 1 / 4 / 3\", width: '100%' }} label=\"Descrizione\" variant=\"outlined\" error={fieldErrors.description} helperText={fieldErrors.description ? \"Questo campo è obbligatorio\" : \"\"} className=\"form-field\" name=\"description\" value={formValues.description} onChange={handleInputChange} />\n            </StyledContacterContainer>\n            <StyledButtonContainer>\n                <StyledButtonSend variant=\"filled\" onClick={handleFormSubmit}>Invia {type ? 'la segnalazione' : 'la richiesta'}</StyledButtonSend>\n            </StyledButtonContainer>\n            {showAlert &&\n                <StyledMuiAlert className=\"mui-alert\" severity={severityCap}>\n                    <AlertTitle>{alertTitleText}</AlertTitle>\n                    {alertBodyText}\n                </StyledMuiAlert>\n            }\n        </>\n    );\n}\n\nexport default Contacter"],"names":["StyledContacterContainer","styled","div","_templateObject","_taggedTemplateLiteral","StyledButtonContainer","_templateObject2","StyledButtonSend","Button","_templateObject3","StyledMuiAlert","Alert","_templateObject4","_ref","type","isUploading","setIsUploading","useState","showAlert","setShowAlert","severityCap","setSeverityCap","alertTitleText","setAlertTitleText","alertBodyText","setAlertBodyText","formValues","setFormValues","whoIsHe","email","subject","description","date","dateToSave","fieldErrors","setFieldErrors","useEffect","setTimeout","handleInputChange","event","name","value","target","isValid","trim","saveOnDB","async","v","nv","uniqueId","characters","alphanumericId","i","randomIndex","Math","floor","random","charAt","generateAlphaNumericId","options","method","headers","accept","body","JSON","stringify","fetch","then","r","json","_ref2","status","s","message","m","concat","catch","err","console","error","_jsxs","_Fragment","children","_jsx","IAmLoading","style","textAlign","TextField","fullWidth","label","variant","helperText","className","onChange","LocalizationProvider","dateAdapter","AdapterDayjs","DateTimePicker","ampm","mydate","dayjs","format","multiline","rows","gridArea","width","onClick","handleFormSubmit","countErrors","Object","keys","forEach","key","severity","AlertTitle"],"sourceRoot":""}